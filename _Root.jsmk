/**
 * Our clap plugin is a single dso/dll that has dependencies on one or more
 * other dsos.  Our plugin package combines these all into a platform-specifi
 * subdirectory structure.
 * 
 *  Windows, Linux:
 *     fluidsynth.clap/  <-- a directory
 *          fluidsynth.clap <--- the real clap plugin
 *          libfluidsynth-3.dll <-- the real fluidsynth
 *          libglib-2.0-0.dll <-- example of libfluidsynth-3 dependency
 *          ....
 *          README.md, LICENSE, etc
 *  MacOS:
 *     fluidsynth.clap/  <-- a directory/bundle
 *          Contents/
 *          MacOS/
 *              fluidsynth.clap <-- the real clap plugin
 *          PkgInfo
 *          Resources/
 *             clap.icns
 *          _CodeSignature/
 *             CodeResources   (xml/plist)
 */
let pkgj = jsmk.file.read(jsmk.path.join(Project.ProjectDir, "package.json"));
let pkg = JSON.parse(pkgj);
let appName = pkg.name;
let appVers = pkg.version;

Project.EstablishDomain(appName, /(vs|gcc|clang)/,
{
    AppName: appName,
    Package: appName, // version-less (version installed inside)
    Version: appVers,
    Track: "beta",
    TimestampFile: "BUILD.json",
    CppStd: "c++17", // clap prefers modern c++
});

Project.Define({
    win32: {
        WIN32: null,
        __PLATFORM_WIN32__: null,
        _CONSOLE: null,
        _CRT_SECURE_NO_WARNINGS: null,
    },
    linux: {
        __PLATFORM_LINUX__: null,
        LINUX: null
    },
    darwin: {
        __PLATFORM_MACOS__: null,
        __MACOSX_CORE__: null,
    }
}[process.platform]);

let platform = process.platform;
let installRoot = Project.EvaluateBuildVar("InstallDir");

let fpkg = {
    win32: "_prebuilt/fluidsynth-2.3.3-win10-x64",
    darwin: "/opt/homebrew",
    // win32: "_prebuilt/fluidsynth-dev-win10-x64"
}[platform];
let fluidSearchpaths = [`${fpkg}/include`];
let fluidLibs = 
{
    win32: [`${fpkg}/lib/libfluidsynth.dll.a`],
    darwin: [`${fpkg}/lib/libfluidsynth.dylib`],
}[platform];

let m = Project.NewModule("fluidsynth.clap");
let defs = {
    CLAP_PLUGINS_HEADLERS: null,
    CLAP_NO_YAS: null
};

let t1 = m.NewTask("compile", "cpp->o", 
{
    inputs: Project.Glob("src/*.cpp"),
    defs,
    searchpaths: [
        "src",
        `clap/include`,
        `clap-helpers/include`,
        ...fluidSearchpaths,
    ],
});

let t2 = m.NewTask("fluidsynth", "cpp.o->so", {
    inputs: t1.GetOutputs(),
    deps: fluidLibs
});

/* copy our .clap file (dll) into an app/package framework ----------- */
switch(platform)
{
case "win32":
case "linux":
    m.NewTask("installPlu", "install", {
        inputs: t2.GetOutputs(), 
        installext: ".clap", // <--------- need separate rule for other files
        installdir: "/"
    });
    m.NewTask("installDLLs", "install", {
                inputs: Project.Glob(`${fpkg}/bin/*.dll`),
                installdir: "/"
            });
    m.NewTask("installLegal", "install", {
        inputs: ["README.md", "LICENSE", "BUILD.json"],
        installdir: "/",
    });
    break;
case "darwin":
    // We only perform copy/fixup of dlls during the packaging phase.
    // This is because the stripping overlaps with the required signing.
    {
        let binDir = "Contents/MacOS";
        let frameworksDir = "Contents/Frameworks";
        let resourcesDir = "Contents/Resources";
        let tcpy = m.NewTask("installPlug", "install", {
            inputs: t2.GetOutputs(), 
            installext: ".clap", // <--------- need separate rule for other files
            installdir: binDir,
        });
        /*
        m.NewTask("packageDLLs", "installscript", {
            ARGUMENTS: ["build/fixupDLLs.js",
                 jsmk.path.join(installRoot, frameworksDir), 
                 ...tcpy.GetOutputs()
                ]
            })
        */
        m.NewTask("installLegal", "install", {
            inputs: ["README.md", "LICENSE", "BUILD.json", "licenses"],
            installdir: jsmk.path.join(resourcesDir, "etc"),
        });
        m.NewTask("installPkg", "install", {
            inputs: ["build/darwin/Info.plist", "build/darwin/PkgInfo"],
            installdir: "Contents"
        });
        // osxsigning.js is where entitlements.plist is accessed.
        // https://developer.apple.com/documentation/security/hardened_runtime
        // in order to load vst3 plugings we must:
        //   com.apple.security.cs.disable-library-validation true
        //   com.apple.security.device.audio-input true
        //   (nb: this is distinct from Info.plist!!!)

        // and this is where notarization of signing occurs
        /*
        m.NewTask("osxSign", "packagescript",
        {
            ARGUMENTS: [
                "build/osxNotarize.js", appDirPath,
            ]
        });
        
        // and this is where notarization of signing occurs
        m.NewTask("osxNotarize", "repositscript",
        {
            ARGUMENTS: [
                "build/osxNotarize.js", appDirPath,
            ]
        });
        */
    }
    break;
}

/* finally, we zip ------------------------------- */
let zipfile = "fluidsynth.clap.zip";
m.NewTask("fluidsynthPackage", "packagescript", {
    ARGUMENTS: ["build/zipdir.js", installRoot,
        jsmk.path.join(installRoot, "..", zipfile)]
});

