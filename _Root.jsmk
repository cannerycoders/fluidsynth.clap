let appname = "fluidsynth.clap";
let vers = "0.1.0"
if(!Project.GetBuildVar("JSMK_NODOMAIN"))
{
    Project.EstablishDomain(appname, /(vs|gcc|clang)/,
    {
        AppName: appname,
        Package: `${appname}-${vers}`,
        Version: vers,
        Track: "beta",
        CppStd: "c++17", // clap prefers modern c++
    });
}

let platform = process.platform;
let CLAPROOT = Project.GetBuildVar("CLAP_ROOT") || ""; // are clap submodules local?
let fpkg = {
    win32: "_prebuilt/fluidsynth-2.3.3-win10-x64"
    // win32: "_prebuilt/fluidsynth-dev-win10-x64"
}[platform];
let fluidSearchpaths = [`${fpkg}/include`];
let fluidLibs = 
{
    win32: [`${fpkg}/lib/libfluidsynth.dll.a`]
    // win32: [`${fpkg}/lib/fluidsynth.lib`]
}[platform];

let m = Project.NewModule("pluginsrc");
let defs = {
    CLAP_PLUGINS_HEADLERS: null,
    CLAP_NO_YAS: null
};

let t1 = m.NewTask("compile", "cpp->o", 
{
    inputs: Project.Glob("src/*.cpp"),
    defs,
    searchpaths: [
        "src",
        `${CLAPROOT}clap/include`,
        `${CLAPROOT}clap-helpers/include`,
        ...fluidSearchpaths,
    ],
});

let t2 = m.NewTask("fluidsynth", "cpp.o->so", {
    inputs: t1.GetOutputs(),
    deps: fluidLibs
});

let installdir = "resources/plugins/fluidsynth.clap";
let zipfile = "fluidsynth.clap.zip";
let installRoot = Project.EvaluateBuildVar("InstallDir");
let t3 = m.NewTask("fluidsynthInstall", "install", {
    inputs: t2.GetOutputs(), 
    installext: ".clap", // <--------- need separate rule for other files
    installdir, 
});


if(platform == "win32")
{
    let t4 = m.NewTask("fluidsynthInstallDLLs", "install", {
                inputs: Project.Glob(`${fpkg}/bin/*.dll`),
                installdir,
            });
}

m.NewTask("fluidsynthInstallLegal", "install", {
    inputs: ["README.md", "LICENSE"],
    installdir,
});

m.NewTask("fluidsynthPackage", "packagescript", {
    ARGUMENTS: ["../build/zipdir.js", 
        jsmk.path.join(installRoot, installdir), 
        jsmk.path.join(installRoot, "..", zipfile)]
});
