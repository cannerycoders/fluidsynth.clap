/**
 * Our clap plugin is a single dso/dll that has dependencies on one or more
 * other dsos.  Our plugin package combines these all into a platform-specifi
 * subdirectory structure.
 * 
 *  Windows, Linux:
 *     FluidSynth.clap/  <-- a directory
 *          FluidSynth.clap <--- the real clap plugin
 *          libfluidsynth-3.dll <-- the real fluidsynth
 *          libglib-2.0-0.dll <-- example of libfluidsynth-3 dependency
 *          ....
 *          README.md, LICENSE, etc
 *  MacOS:
 *     FluidSynth.clap/  <-- a directory/bundle
 *          Contents/
 *          MacOS/
 *              fluidsynth <-- the real clap plugin (shouldn't include .clap)
 *          PkgInfo
 *          Resources/
 *             clap.icns
 *          _CodeSignature/
 *             CodeResources   (xml/plist)
 */
let pkgj = jsmk.file.read(jsmk.path.join(Project.ProjectDir, "package.json"));
let pkg = JSON.parse(pkgj);
let appName = pkg.label;
let appVers = pkg.version;

Project.EstablishDomain(appName, /(vs|gcc|clang)/,
{
    AppName: appName,
    Package: appName, // version-less (version installed inside)
    Version: appVers,
    Track: "beta",
    TimestampFile: "BUILD.json",
    CppStd: "c++17", // clap prefers modern c++
});

Project.Define({
    win32: {
        WIN32: null,
        __PLATFORM_WIN32__: null,
        _CONSOLE: null,
        _CRT_SECURE_NO_WARNINGS: null,
    },
    linux: {
        __PLATFORM_LINUX__: null,
        LINUX: null
    },
    darwin: {
        __PLATFORM_MACOS__: null,
        __MACOSX_CORE__: null,
    }
}[process.platform]);

let platform = process.platform;
let installRoot = Project.EvaluateBuildVar("InstallDir");

let fpkg = {
    win32: "_prebuilt/fluidsynth-2.3.3-win10-x64",
    linux: "_prebuilt/fluidsynth-2.3.3-linux-x64",
    darwin: "/opt/homebrew",
    // win32: "_prebuilt/fluidsynth-dev-win10-x64"
}[platform];
let fluidSearchpaths = [`${fpkg}/include`];
let fluidLibs = 
{
    win32: [`${fpkg}/lib/libfluidsynth.dll.a`],
    linux: [`${fpkg}/lib/libfluidsynth.so.3`],
    darwin: [],
}[platform];

let fluidModules =
{
    darwin: ["libfluidsynth"]
}[platform];

let guiLibs =
{
    win32: [
        "dwmapi.lib",
        "kernel32.lib",
        "shell32.lib",
        "ole32.lib",
        "user32.lib",
    ],
}[platform];

if(platform == "darwin") // see build/*/notes.md
{
    Project.NewProject("libfluidsynthProj", {
        ProjectDir: "fluidsynth/src",
        ProjectFilePath: "_LibFluidSynth.jsmk",
    }).EstablishBarrier("after");
}

let m = Project.NewModule(appName);
let defs = {
    CLAP_PLUGINS_HEADLERS: null,
    CLAP_NO_YAS: null
};

let t1 = m.NewTask("compile", "cpp->o",
{
    inputs: Project.Glob("src/*.cpp"),
    defs,
    searchpaths: [
        "src",
        `clap/include`,
        `clap-helpers/include`,
        ...fluidSearchpaths,
        ".", // for choc
    ],
});

// jsmk.WARNING(`fluidModules: ${fluidModules} ${platform}`);
// NB: name of task is depended upon during install+renaming.
// NB2: the name of the install dir is governed by package.json (see top)
let linkflags = {
    darwin: [],
    win32: [],
    linux: ["-Wl,-rpath=$ORIGIN"]
}[platform];

let t2 = m.NewTask("FluidSynth", "cpp.o->so", {
    inputs: t1.GetOutputs(),
    deps: fluidLibs,
    modules: fluidModules,
    flags: linkflags,
    libs: guiLibs,
});

m.NewTask("installWebview", "install", {
    inputs: Project.Glob("src/webview/*"),
    installdir: "webview"
});

switch(platform)
{
case "linux":
case "win32":
    {
        let ts = jsmk.GetActiveToolset().GetHandle();
        let dsoGlob = (platform == "linux") ? "lib/*so*" : "bin/*.dll";
        m.NewTask("installPlug", "install", {
            inputs: t2.GetOutputs(), 
            installext: ".clap", // <--------- need separate rule for other files
            installdir: "/"
        });
        /* windows dlls can be downloaded from fluidsynth github */
        m.NewTask("installDLLs", "install", {
                    inputs: Project.Glob(`${fpkg}/${dsoGlob}`),
                    installdir: "/"
                });
        /* install the _built to _install, copying on the way --- */
        m.NewTask("installLegal", "install", {
            inputs: ["README.md", "LICENSE", "BUILD.json", "licenses"],
            installdir: "etc",
        });
        /* finally, we zip ------------------------------- */
        let zipfile = `${appName}.${ts}.zip`;
        m.NewTask("fluidsynthPackage", "packagescript", {
            ARGUMENTS: ["build/zipdir.js", installRoot,
                jsmk.path.join(installRoot, "..", zipfile)]
        });
    }
    break;
case "darwin":
    // We only perform copy/fixup of dlls during the packaging phase.
    // This is because the stripping overlaps with the required signing.
    {
        let binDir = "Contents/MacOS";
        let resourcesDir = "Contents/Resources";
        let tcpy = m.NewTask("installPlug", "install", {
            inputs: t2.GetOutputs(), 
            installext: "", // <--------- need separate rule for other files
            installdir: binDir,
        });
        /* no frameworks atm, statically linked 
        m.NewTask("packageDLLs", "installscript", {
            ARGUMENTS: ["build/fixupDLLs.js",
                 jsmk.path.join(installRoot, frameworksDir), 
                 ...tcpy.GetOutputs()
                ]
            })
        */
        m.NewTask("installPkg", "install", {
            inputs: ["build/darwin/Info.plist", "build/darwin/PkgInfo"],
            installdir: "Contents"
        });
        m.NewTask("installLegal", "install", {
            inputs: ["README.md", "LICENSE", "BUILD.json", "licenses", "build/darwin/clap.icns"],
            installdir: resourcesDir,
        });
        // https://developer.apple.com/forums/thread/130855
        //  -- only sign binaries
        //  -- only apply entitlements to apps
        m.NewTask("osxsign", "packagescript",
        {
            ARGUMENTS: [
                "build/darwin/osxsign.js", installRoot,
            ]
        });

        let ts = jsmk.GetActiveToolset().GetHandle();
        let dmgExt = `.${ts}.dmg`;
        m.NewTask("osxdmg", "packagescript", 
        {
            ARGUMENTS: [
                "build/darwin/osxpackage.js", "FluidSynth.clap", installRoot, "build/darwin/Help.rtf", 
                installRoot+dmgExt
            ]
        });
        
        m.NewTask("osxnotarize", "repositscript",
        {
            ARGUMENTS: [
                "build/darwin/osxnotarize.js", installRoot+dmgExt
            ]
        });
    }
    break;
}
